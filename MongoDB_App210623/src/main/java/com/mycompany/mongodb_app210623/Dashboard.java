package com.mycompany.mongodb_app210623;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.MongoException;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author ANONYMOUS
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        this.setLocationRelativeTo(null);
        listarDatosCuidador();
        listarDatosZona();
        listarDatosAnimales();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txf_codigoCuidador = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txf_nombreCuidador = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txf_apellido = new javax.swing.JTextField();
        txf_telefonoUno = new javax.swing.JTextField();
        txf_telefonoDos = new javax.swing.JTextField();
        txf_telefonoTres = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btn_buscarCuidador = new javax.swing.JButton();
        btn_limpiarCuidador = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btn_guardarCuidador = new javax.swing.JButton();
        btn_actualizarCuidador = new javax.swing.JButton();
        btn_listarCuidador = new javax.swing.JButton();
        btn_eliminarCuidador = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCuidador = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        txf_codigoZona = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txf_descripcionZona = new javax.swing.JTextArea();
        btn_buscarZona = new javax.swing.JButton();
        btn_limpiarCuidador1 = new javax.swing.JButton();
        btn_limpiarZona = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        btn_guardarZona = new javax.swing.JButton();
        btn_actualizarZona = new javax.swing.JButton();
        btn_listarrZona = new javax.swing.JButton();
        btn_eliminarZona = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaZona = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        txf_codigoAnimal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txf_especieAnimal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txf_nombreAnimal = new javax.swing.JTextField();
        txf_zonaUno = new javax.swing.JTextField();
        txf_zonaDos = new javax.swing.JTextField();
        txf_zonaTres = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btn_buscarAnimales = new javax.swing.JButton();
        btn_limpiarAnimales = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        btn_guardarAnimales = new javax.swing.JButton();
        btn_actualizarAnimales = new javax.swing.JButton();
        btn_listarAnimales = new javax.swing.JButton();
        btn_eliminarAnimales = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaAnimales = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txf_codigoCuidador.setToolTipText("");
        txf_codigoCuidador.setName(""); // NOI18N

        jLabel1.setText("CODIGO:");

        txf_nombreCuidador.setToolTipText("");
        txf_nombreCuidador.setName(""); // NOI18N

        jLabel2.setText("NOMBRE:");

        jLabel3.setText("APELLIDO:");

        jLabel4.setText("TELEFONO 1:");

        jLabel5.setText("TELEFONO 2:");

        jLabel6.setText("TELEFONO 3:");

        btn_buscarCuidador.setText("BUSCAR");
        btn_buscarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_buscarCuidadorMouseClicked(evt);
            }
        });

        btn_limpiarCuidador.setText("LIMPIAR");
        btn_limpiarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limpiarCuidadorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txf_codigoCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txf_nombreCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txf_telefonoTres, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(txf_telefonoDos)
                            .addComponent(txf_apellido)
                            .addComponent(txf_telefonoUno))))
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_limpiarCuidador, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(btn_buscarCuidador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txf_codigoCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscarCuidador))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txf_nombreCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btn_limpiarCuidador)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txf_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txf_telefonoUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_telefonoDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_telefonoTres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        btn_guardarCuidador.setText("GUARDAR");
        btn_guardarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_guardarCuidadorMouseClicked(evt);
            }
        });

        btn_actualizarCuidador.setText("ACTUALIZAR");
        btn_actualizarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_actualizarCuidadorMouseClicked(evt);
            }
        });

        btn_listarCuidador.setText("LISTAR");
        btn_listarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_listarCuidadorMouseClicked(evt);
            }
        });

        btn_eliminarCuidador.setText("ELIMINAR");
        btn_eliminarCuidador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_eliminarCuidadorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(btn_guardarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_listarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_actualizarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_eliminarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(118, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_actualizarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_listarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_eliminarCuidador, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        tablaCuidador.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaCuidador);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(87, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Cuidador", jPanel1);

        txf_codigoZona.setToolTipText("");
        txf_codigoZona.setName(""); // NOI18N

        jLabel7.setText("CODIGO:");

        jLabel8.setText("DESCRIPCION:");

        txf_descripcionZona.setColumns(20);
        txf_descripcionZona.setRows(5);
        jScrollPane1.setViewportView(txf_descripcionZona);

        btn_buscarZona.setText("BUSCAR");
        btn_buscarZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_buscarZonaMouseClicked(evt);
            }
        });

        btn_limpiarCuidador1.setText("LIMPIAR");

        btn_limpiarZona.setText("LIMPIAR");
        btn_limpiarZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limpiarZonaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(txf_codigoZona, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_buscarZona))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_limpiarZona)))
                .addContainerGap(96, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btn_limpiarCuidador1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_buscarZona, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txf_codigoZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_limpiarZona))
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btn_limpiarCuidador1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        btn_guardarZona.setText("GUARDAR");
        btn_guardarZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_guardarZonaMouseClicked(evt);
            }
        });

        btn_actualizarZona.setText("ACTUALIZAR");
        btn_actualizarZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_actualizarZonaMouseClicked(evt);
            }
        });

        btn_listarrZona.setText("LISTAR");
        btn_listarrZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_listarrZonaMouseClicked(evt);
            }
        });

        btn_eliminarZona.setText("ELIMINAR");
        btn_eliminarZona.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_eliminarZonaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(btn_guardarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btn_listarrZona, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btn_actualizarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_eliminarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_actualizarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_eliminarZona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_listarrZona, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        tablaZona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tablaZona);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(208, 208, 208))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Zona", jPanel2);

        txf_codigoAnimal.setToolTipText("");
        txf_codigoAnimal.setName(""); // NOI18N

        jLabel13.setText("CODIGO:");

        txf_especieAnimal.setToolTipText("");
        txf_especieAnimal.setName(""); // NOI18N

        jLabel14.setText("ESPECIE:");

        jLabel15.setText("NOMBRE:");

        jLabel16.setText("ZONA 1:");

        jLabel17.setText("ZONA 2:");

        jLabel18.setText("ZONA 3:");

        btn_buscarAnimales.setText("BUSCAR");
        btn_buscarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_buscarAnimalesMouseClicked(evt);
            }
        });

        btn_limpiarAnimales.setText("LIMPIAR");
        btn_limpiarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_limpiarAnimalesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(txf_codigoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(txf_especieAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txf_zonaTres)
                            .addComponent(txf_zonaDos)
                            .addComponent(txf_nombreAnimal)
                            .addComponent(txf_zonaUno, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_buscarAnimales)
                    .addComponent(btn_limpiarAnimales))
                .addGap(86, 86, 86))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txf_codigoAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_buscarAnimales))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_especieAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(btn_limpiarAnimales))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(txf_nombreAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(txf_zonaUno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_zonaDos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txf_zonaTres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        btn_guardarAnimales.setText("GUARDAR");
        btn_guardarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_guardarAnimalesMouseClicked(evt);
            }
        });

        btn_actualizarAnimales.setText("ACTUALIZAR");
        btn_actualizarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_actualizarAnimalesMouseClicked(evt);
            }
        });

        btn_listarAnimales.setText("LISTAR");
        btn_listarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_listarAnimalesMouseClicked(evt);
            }
        });

        btn_eliminarAnimales.setText("ELIMINAR");
        btn_eliminarAnimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_eliminarAnimalesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(btn_guardarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_listarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_actualizarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_eliminarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_guardarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_actualizarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_eliminarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_listarAnimales, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        tablaAnimales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(tablaAnimales);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(87, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Animales", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1014, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_guardarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_guardarCuidadorMouseClicked
        // TODO add your handling code here:

        String codigo = txf_codigoCuidador.getText();
        String nombre = txf_nombreCuidador.getText();
        String apellido = txf_apellido.getText();
        String telefonoUno = txf_telefonoUno.getText();
        String telefonoDos = txf_telefonoDos.getText();
        String telefonoTres = txf_telefonoTres.getText();

        boolean validar = false;

        // Crear una lista para almacenar los teléfonos
        List<String> telefonos = new ArrayList<>();

        // Agregar los teléfonos a la lista si tienen valores
        if (!telefonoUno.isEmpty()) {
            telefonos.add(telefonoUno);
        }
        if (!telefonoDos.isEmpty()) {
            telefonos.add(telefonoDos);
        }
        if (!telefonoTres.isEmpty()) {
            telefonos.add(telefonoTres);
        }

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("cuidador");

        // Crear un documento
        Document documento = new Document("codigo", codigo)
                .append("nombre", nombre)
                .append("apellido", apellido)
                .append("telefono", telefonos);

        // Insertar el documento en la colección
        collection.insertOne(documento);

        // Validar si el documento se guardó correctamente
        Object id = documento.get("_id");
        if (id != null) {
            System.out.println("Documento guardado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento guardado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("Error al guardar el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "Error al guardar el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoCuidador.setText("");
            txf_nombreCuidador.setText("");
            txf_apellido.setText("");
            txf_telefonoUno.setText("");
            txf_telefonoDos.setText("");
            txf_telefonoTres.setText("");

            listarDatosCuidador();
        }
    }//GEN-LAST:event_btn_guardarCuidadorMouseClicked

    private void btn_guardarZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_guardarZonaMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoZona.getText();
        String descripcion = txf_descripcionZona.getText();

        boolean validar = false;

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("zona");

        // Crear un documento
        Document documento = new Document("codigo", codigo)
                .append("descripcion", descripcion);

        // Insertar el documento en la colección
        collection.insertOne(documento);

        // Validar si el documento se guardó correctamente
        Object id = documento.get("_id");
        if (id != null) {
            System.out.println("Documento guardado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento guardado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("Error al guardar el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "Error al guardar el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoZona.setText("");
            txf_descripcionZona.setText("");

            listarDatosZona();
        }
    }//GEN-LAST:event_btn_guardarZonaMouseClicked

    private void btn_guardarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_guardarAnimalesMouseClicked
        // TODO add your handling code here:

        String codigo = txf_codigoAnimal.getText();
        String especie = txf_especieAnimal.getText();
        String nombre = txf_nombreAnimal.getText();
        String zonaUno = txf_zonaUno.getText();
        String zonaDos = txf_zonaDos.getText();
        String zonaTres = txf_zonaTres.getText();

        boolean validar = false;

        // Crear una lista para almacenar los teléfonos
        List<String> zonas = new ArrayList<>();

        // Agregar los teléfonos a la lista si tienen valores
        if (!zonaUno.isEmpty()) {
            zonas.add(zonaUno);
        }
        if (!zonaDos.isEmpty()) {
            zonas.add(zonaDos);
        }
        if (!zonaTres.isEmpty()) {
            zonas.add(zonaTres);
        }

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("animales");

        // Crear un documento
        Document documento = new Document("codigo", codigo)
                .append("especie", especie)
                .append("nombre", nombre)
                .append("zona", zonas);

        // Insertar el documento en la colección
        collection.insertOne(documento);

        // Validar si el documento se guardó correctamente
        Object id = documento.get("_id");
        if (id != null) {
            System.out.println("Documento guardado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento guardado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("Error al guardar el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "Error al guardar el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoAnimal.setText("");
            txf_especieAnimal.setText("");
            txf_nombreAnimal.setText("");
            txf_zonaUno.setText("");
            txf_zonaDos.setText("");
            txf_zonaTres.setText("");

            listarDatosAnimales();
        }
    }//GEN-LAST:event_btn_guardarAnimalesMouseClicked

    private void btn_actualizarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizarAnimalesMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoAnimal.getText();
        String especie = txf_especieAnimal.getText();
        String nombre = txf_nombreAnimal.getText();
        String zonaUno = txf_zonaUno.getText();
        String zonaDos = txf_zonaDos.getText();
        String zonaTres = txf_zonaTres.getText();

        boolean validar = false;

        // Crear una lista para almacenar las zonas
        List<String> zonas = new ArrayList<>();

        // Agregar las zonas a la lista si tienen valores
        if (!zonaUno.isEmpty()) {
            zonas.add(zonaUno);
        }
        if (!zonaDos.isEmpty()) {
            zonas.add(zonaDos);
        }
        if (!zonaTres.isEmpty()) {
            zonas.add(zonaTres);
        }

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("animales");

        // Crear un filtro para buscar el documento a actualizar
        Bson filtro = Filters.eq("codigo", codigo);

        // Crear un documento con los nuevos valores
        Document nuevoDocumento = new Document("$set", new Document("especie", especie)
                .append("nombre", nombre)
                .append("zona", zonas));

        // Actualizar el documento en la colección
        UpdateResult result = collection.updateOne(filtro, nuevoDocumento);

        // Validar si el documento se actualizó correctamente
        if (result.getModifiedCount() > 0) {
            System.out.println("Documento actualizado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento actualizado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("Error al actualizar el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "Error al actualizar el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoAnimal.setText("");
            txf_especieAnimal.setText("");
            txf_nombreAnimal.setText("");
            txf_zonaUno.setText("");
            txf_zonaDos.setText("");
            txf_zonaTres.setText("");

            listarDatosAnimales();
        }
    }//GEN-LAST:event_btn_actualizarAnimalesMouseClicked

    private void btn_actualizarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizarCuidadorMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoCuidador.getText();
        String nombre = txf_nombreCuidador.getText();
        String apellido = txf_apellido.getText();
        String telefonoUno = txf_telefonoUno.getText();
        String telefonoDos = txf_telefonoDos.getText();
        String telefonoTres = txf_telefonoTres.getText();

        boolean validar = false;

        // Crear una lista para almacenar los teléfonos
        List<String> telefonos = new ArrayList<>();

        // Agregar los teléfonos a la lista si tienen valores
        if (!telefonoUno.isEmpty()) {
            telefonos.add(telefonoUno);
        }
        if (!telefonoDos.isEmpty()) {
            telefonos.add(telefonoDos);
        }
        if (!telefonoTres.isEmpty()) {
            telefonos.add(telefonoTres);
        }

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("cuidador");

        // Crear un filtro para buscar el documento a actualizar
        Bson filtro = Filters.eq("codigo", codigo);

        // Crear un documento con los nuevos valores
        Document nuevoDocumento = new Document("$set", new Document("nombre", nombre)
                .append("apellido", apellido)
                .append("telefono", telefonos));

        // Actualizar el documento en la colección
        UpdateResult result = collection.updateOne(filtro, nuevoDocumento);

        // Validar si el documento se actualizó correctamente
        if (result.getModifiedCount() > 0) {
            System.out.println("Documento actualizado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento actualizado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("Error al actualizar el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "Error al actualizar el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoCuidador.setText("");
            txf_nombreCuidador.setText("");
            txf_apellido.setText("");
            txf_telefonoUno.setText("");
            txf_telefonoDos.setText("");
            txf_telefonoTres.setText("");

            listarDatosCuidador();
        }
    }//GEN-LAST:event_btn_actualizarCuidadorMouseClicked

    private void btn_buscarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_buscarCuidadorMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoCuidador.getText();

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("cuidador");

        // Crear un filtro para buscar documentos que coincidan con el código del cuidador
        Document filtro = new Document("codigo", codigo);

        // Realizar la búsqueda y obtener el primer documento encontrado
        Document documentoEncontrado = collection.find(filtro).first();

        // Validar si se encontró un documento
        if (documentoEncontrado != null) {
            // Obtener los valores de los campos del documento
            String codigoEncontrado = documentoEncontrado.getString("codigo");
            String nombreEncontrado = documentoEncontrado.getString("nombre");
            String apellidoEncontrado = documentoEncontrado.getString("apellido");
            List<String> telefonosEncontrados = documentoEncontrado.getList("telefono", String.class);

            // Cargar los valores en los campos de texto de la interfaz
            txf_codigoCuidador.setText(codigoEncontrado);
            txf_nombreCuidador.setText(nombreEncontrado);
            txf_apellido.setText(apellidoEncontrado);
            txf_telefonoUno.setText(telefonosEncontrados.get(0));
            if (telefonosEncontrados.size() > 1) {
                txf_telefonoDos.setText(telefonosEncontrados.get(1));
            } else {
                txf_telefonoDos.setText("");
            }
            if (telefonosEncontrados.size() > 2) {
                txf_telefonoTres.setText(telefonosEncontrados.get(2));
            } else {
                txf_telefonoTres.setText("");
            }

            System.out.println("Documento encontrado en MongoDB");
        } else {
            System.out.println("No se encontró el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "No se encontró el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();
    }//GEN-LAST:event_btn_buscarCuidadorMouseClicked

    private void btn_listarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_listarCuidadorMouseClicked
        // TODO add your handling code here:
        listarDatosCuidador();
    }//GEN-LAST:event_btn_listarCuidadorMouseClicked

    private void btn_eliminarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarCuidadorMouseClicked
        // TODO add your handling code here:
        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("cuidador");

        // Definir el campo y el valor del documento a eliminar
        String codigo = txf_codigoCuidador.getText();

        boolean validar = false;

        // Crear un filtro para identificar el documento a eliminar
        Document filtro = new Document("codigo", codigo);

        try {
            // Eliminar el documento que coincide con el filtro
            collection.deleteOne(filtro);
            System.out.println("Documento eliminado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento eliminado correctamente en MongoDB.");

            validar = true;
        } catch (MongoException e) {
            System.out.println("Error al eliminar el documento en MongoDB: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al eliminar el documento en MongoDB.");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoCuidador.setText("");
            txf_nombreCuidador.setText("");
            txf_apellido.setText("");
            txf_telefonoUno.setText("");
            txf_telefonoDos.setText("");
            txf_telefonoTres.setText("");

            listarDatosCuidador();
        }
    }//GEN-LAST:event_btn_eliminarCuidadorMouseClicked

    private void btn_actualizarZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_actualizarZonaMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoZona.getText();
        String descripcion = txf_descripcionZona.getText();

        boolean validar = false;

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("zona");

        // Crear un filtro para encontrar el documento correspondiente al código
        Bson filtro = Filters.eq("codigo", codigo);

        // Crear un documento con los nuevos valores a actualizar
        Document valoresActualizados = new Document("$set", new Document("descripcion", descripcion));

        // Actualizar el documento en la colección
        UpdateResult result = collection.updateOne(filtro, valoresActualizados);

        // Obtener el número de documentos modificados
        long documentosModificados = result.getModifiedCount();

        if (documentosModificados > 0) {
            System.out.println("Documento actualizado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento actualizado correctamente en MongoDB");
            validar = true;
        } else {
            System.out.println("No se encontró el documento o no se realizó ninguna actualización");
            JOptionPane.showMessageDialog(null, "No se encontró el documento o no se realizó ninguna actualización");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoZona.setText("");
            txf_descripcionZona.setText("");

            listarDatosZona();
        }
    }//GEN-LAST:event_btn_actualizarZonaMouseClicked

    private void btn_listarrZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_listarrZonaMouseClicked
        // TODO add your handling code here:
        listarDatosZona();
    }//GEN-LAST:event_btn_listarrZonaMouseClicked

    private void btn_eliminarZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarZonaMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoZona.getText();

        boolean validar = false;

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("zona");

        // Crear un filtro para encontrar el documento correspondiente al código
        Bson filtro = Filters.eq("codigo", codigo);

        // Eliminar el documento de la colección
        DeleteResult result = collection.deleteOne(filtro);

        // Obtener el número de documentos eliminados
        long documentosEliminados = result.getDeletedCount();

        if (documentosEliminados > 0) {
            System.out.println("Documento eliminado correctamente de MongoDB");
            JOptionPane.showMessageDialog(null, "Documento eliminado correctamente de MongoDB");
            validar = true;
        } else {
            System.out.println("No se encontró el documento o no se realizó ninguna eliminación");
            JOptionPane.showMessageDialog(null, "No se encontró el documento o no se realizó ninguna eliminación");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoZona.setText("");
            txf_descripcionZona.setText("");

            listarDatosZona();
        }
    }//GEN-LAST:event_btn_eliminarZonaMouseClicked

    private void btn_buscarZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_buscarZonaMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoZona.getText();

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("zona");

        // Crear un filtro para buscar documentos que coincidan con el código de la zona
        Bson filtro = Filters.eq("codigo", codigo);

        // Realizar la búsqueda y obtener el primer documento encontrado
        Document documentoEncontrado = collection.find(filtro).first();

        // Validar si se encontró un documento
        if (documentoEncontrado != null) {
            // Obtener los valores de los campos del documento
            String codigoEncontrado = documentoEncontrado.getString("codigo");
            String descripcionEncontrada = documentoEncontrado.getString("descripcion");

            // Cargar los valores en los campos de texto de la interfaz
            txf_codigoZona.setText(codigoEncontrado);
            txf_descripcionZona.setText(descripcionEncontrada);

            System.out.println("Documento encontrado en MongoDB");
        } else {
            System.out.println("No se encontró el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "No se encontró el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();
    }//GEN-LAST:event_btn_buscarZonaMouseClicked

    private void btn_listarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_listarAnimalesMouseClicked
        // TODO add your handling code here:
        listarDatosAnimales();
    }//GEN-LAST:event_btn_listarAnimalesMouseClicked

    private void btn_eliminarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminarAnimalesMouseClicked
        // TODO add your handling code here:
        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("animales");

        // Definir el campo y el valor del documento a eliminar
        String codigo = txf_codigoAnimal.getText();

        boolean validar = false;

        // Crear un filtro para identificar el documento a eliminar
        Document filtro = new Document("codigo", codigo);

        try {
            // Eliminar el documento que coincide con el filtro
            collection.deleteOne(filtro);
            System.out.println("Documento eliminado correctamente en MongoDB");
            JOptionPane.showMessageDialog(null, "Documento eliminado correctamente en MongoDB.");

            validar = true;
        } catch (MongoException e) {
            System.out.println("Error al eliminar el documento en MongoDB: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al eliminar el documento en MongoDB.");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();

        if (validar) {
            txf_codigoAnimal.setText("");
            txf_especieAnimal.setText("");
            txf_nombreAnimal.setText("");
            txf_zonaUno.setText("");
            txf_zonaDos.setText("");
            txf_zonaTres.setText("");

            listarDatosAnimales();
        }
    }//GEN-LAST:event_btn_eliminarAnimalesMouseClicked

    private void btn_buscarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_buscarAnimalesMouseClicked
        // TODO add your handling code here:
        String codigo = txf_codigoAnimal.getText();

        Conexion conexion = new Conexion();
        MongoClient mongoClient = conexion.getMongoClient();

        // Obtener una base de datos
        MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

        // Obtener una colección
        MongoCollection<Document> collection = database.getCollection("animales");

        // Crear un filtro para buscar documentos que coincidan con el código del animal
        Document filtro = new Document("codigo", codigo);

        // Realizar la búsqueda y obtener el primer documento encontrado
        Document documentoEncontrado = collection.find(filtro).first();

        // Validar si se encontró un documento
        if (documentoEncontrado != null) {
            // Obtener los valores de los campos del documento
            String codigoEncontrado = documentoEncontrado.getString("codigo");
            String especieEncontrada = documentoEncontrado.getString("especie");
            String nombreEncontrado = documentoEncontrado.getString("nombre");
            List<String> zonasEncontradas = documentoEncontrado.getList("zona", String.class);

            // Cargar los valores en los campos de texto de la interfaz
            txf_codigoAnimal.setText(codigoEncontrado);
            txf_especieAnimal.setText(especieEncontrada);
            txf_nombreAnimal.setText(nombreEncontrado);
            txf_zonaUno.setText(zonasEncontradas.get(0));
            if (zonasEncontradas.size() > 1) {
                txf_zonaDos.setText(zonasEncontradas.get(1));
            } else {
                txf_zonaDos.setText("");
            }
            if (zonasEncontradas.size() > 2) {
                txf_zonaTres.setText(zonasEncontradas.get(2));
            } else {
                txf_zonaTres.setText("");
            }

            System.out.println("Documento encontrado en MongoDB");
        } else {
            System.out.println("No se encontró el documento en MongoDB");
            JOptionPane.showMessageDialog(null, "No se encontró el documento en MongoDB");
        }

        // Cerrar la conexión cuando ya no se necesite
        conexion.cerrarConexion();
    }//GEN-LAST:event_btn_buscarAnimalesMouseClicked

    private void btn_limpiarCuidadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limpiarCuidadorMouseClicked
        // TODO add your handling code here:
        txf_codigoCuidador.setText("");
        txf_nombreCuidador.setText("");
        txf_apellido.setText("");
        txf_telefonoUno.setText("");
        txf_telefonoDos.setText("");
        txf_telefonoTres.setText("");
    }//GEN-LAST:event_btn_limpiarCuidadorMouseClicked

    private void btn_limpiarZonaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limpiarZonaMouseClicked
        // TODO add your handling code here:
        txf_codigoZona.setText("");
        txf_descripcionZona.setText("");
    }//GEN-LAST:event_btn_limpiarZonaMouseClicked

    private void btn_limpiarAnimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_limpiarAnimalesMouseClicked
        // TODO add your handling code here:
        txf_codigoAnimal.setText("");
        txf_especieAnimal.setText("");
        txf_nombreAnimal.setText("");
        txf_zonaUno.setText("");
        txf_zonaDos.setText("");
        txf_zonaTres.setText("");
    }//GEN-LAST:event_btn_limpiarAnimalesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_actualizarAnimales;
    private javax.swing.JButton btn_actualizarCuidador;
    private javax.swing.JButton btn_actualizarZona;
    private javax.swing.JButton btn_buscarAnimales;
    private javax.swing.JButton btn_buscarCuidador;
    private javax.swing.JButton btn_buscarZona;
    private javax.swing.JButton btn_eliminarAnimales;
    private javax.swing.JButton btn_eliminarCuidador;
    private javax.swing.JButton btn_eliminarZona;
    private javax.swing.JButton btn_guardarAnimales;
    private javax.swing.JButton btn_guardarCuidador;
    private javax.swing.JButton btn_guardarZona;
    private javax.swing.JButton btn_limpiarAnimales;
    private javax.swing.JButton btn_limpiarCuidador;
    private javax.swing.JButton btn_limpiarCuidador1;
    private javax.swing.JButton btn_limpiarZona;
    private javax.swing.JButton btn_listarAnimales;
    private javax.swing.JButton btn_listarCuidador;
    private javax.swing.JButton btn_listarrZona;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaAnimales;
    private javax.swing.JTable tablaCuidador;
    private javax.swing.JTable tablaZona;
    private javax.swing.JTextField txf_apellido;
    private javax.swing.JTextField txf_codigoAnimal;
    private javax.swing.JTextField txf_codigoCuidador;
    private javax.swing.JTextField txf_codigoZona;
    private javax.swing.JTextArea txf_descripcionZona;
    private javax.swing.JTextField txf_especieAnimal;
    private javax.swing.JTextField txf_nombreAnimal;
    private javax.swing.JTextField txf_nombreCuidador;
    private javax.swing.JTextField txf_telefonoDos;
    private javax.swing.JTextField txf_telefonoTres;
    private javax.swing.JTextField txf_telefonoUno;
    private javax.swing.JTextField txf_zonaDos;
    private javax.swing.JTextField txf_zonaTres;
    private javax.swing.JTextField txf_zonaUno;
    // End of variables declaration//GEN-END:variables

    public class Conexion {

        private MongoClient mongoClient;

        public Conexion() {
            try {
                // Cadena de conexión a MongoDB
                String connectionString = "mongodb://localhost:27017";

                // Crear el objeto MongoClientURI con la cadena de conexión
                MongoClientURI uri = new MongoClientURI(connectionString);

                // Crear una instancia de MongoClient utilizando el MongoClientURI
                mongoClient = new MongoClient(uri);

                // Imprimir mensaje de éxito si la conexión es exitosa
                System.out.println("Conexión exitosa a MongoDB");
            } catch (MongoException e) {
                // Imprimir mensaje de error en caso de excepción
                System.err.println("Error al conectar a MongoDB: " + e.getMessage());
            }
        }

        public MongoClient getMongoClient() {
            return mongoClient;
        }

        public void cerrarConexion() {
            if (mongoClient != null) {
                mongoClient.close();
                System.out.println("Conexión cerrada con éxito");
            }
        }
    }

    public void listarDatosCuidador() {
        try {
            DefaultTableModel tablaModelo = (DefaultTableModel) tablaCuidador.getModel();
            tablaModelo.setColumnCount(0);
            tablaModelo.setRowCount(0);

            tablaModelo.addColumn("Código");
            tablaModelo.addColumn("Nombre");
            tablaModelo.addColumn("Apellido");
            tablaModelo.addColumn("Teléfono 1");
            tablaModelo.addColumn("Teléfono 2");
            tablaModelo.addColumn("Teléfono 3");

            Conexion conexion = new Conexion();
            MongoClient mongoClient = conexion.getMongoClient();

            // Obtener una base de datos
            MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

            // Obtener una colección
            MongoCollection<Document> collection = database.getCollection("cuidador");

            // Obtener todos los documentos de la colección
            FindIterable<Document> documentos = collection.find();

            for (Document documento : documentos) {
                String codigo = documento.getString("codigo");
                String nombre = documento.getString("nombre");
                String apellido = documento.getString("apellido");

                List<String> telefonos = (List<String>) documento.get("telefono");
                String telefono1 = "";
                String telefono2 = "";
                String telefono3 = "";

                if (telefonos.size() >= 1) {
                    telefono1 = telefonos.get(0);
                }
                if (telefonos.size() >= 2) {
                    telefono2 = telefonos.get(1);
                }
                if (telefonos.size() >= 3) {
                    telefono3 = telefonos.get(2);
                }

                // Crear una fila con los datos
                String[] fila = {codigo, nombre, apellido, telefono1, telefono2, telefono3};

                // Agregar la fila al modelo de la tabla
                tablaModelo.addRow(fila);
            }

            // Cerrar la conexión cuando ya no se necesite
            conexion.cerrarConexion();
        } catch (Exception ex) {
            System.out.println("Error al llenar la tabla... " + ex);
        }
    }

    public void listarDatosZona() {
        try {
            DefaultTableModel tablaModelo = (DefaultTableModel) tablaZona.getModel();
            tablaModelo.setColumnCount(0);
            tablaModelo.setRowCount(0);

            tablaModelo.addColumn("Código");
            tablaModelo.addColumn("Descripción");

            Conexion conexion = new Conexion();
            MongoClient mongoClient = conexion.getMongoClient();

            // Obtener una base de datos
            MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

            // Obtener una colección
            MongoCollection<Document> collection = database.getCollection("zona");

            // Obtener todos los documentos de la colección
            FindIterable<Document> documentos = collection.find();

            for (Document documento : documentos) {
                String codigo = documento.getString("codigo");
                String descripcion = documento.getString("descripcion");

                // Crear una fila con los datos
                String[] fila = {codigo, descripcion};

                // Agregar la fila al modelo de la tabla
                tablaModelo.addRow(fila);
            }

            // Cerrar la conexión cuando ya no se necesite
            conexion.cerrarConexion();
        } catch (Exception ex) {
            System.out.println("Error al llenar la tabla... " + ex);
        }
    }

    public void listarDatosAnimales() {
        try {
            DefaultTableModel tablaModelo = (DefaultTableModel) tablaAnimales.getModel();
            tablaModelo.setColumnCount(0);
            tablaModelo.setRowCount(0);

            tablaModelo.addColumn("Código");
            tablaModelo.addColumn("Especie");
            tablaModelo.addColumn("Nombre");
            tablaModelo.addColumn("Zona 1");
            tablaModelo.addColumn("Zona 2");
            tablaModelo.addColumn("Zona 3");

            Conexion conexion = new Conexion();
            MongoClient mongoClient = conexion.getMongoClient();

            // Obtener una base de datos
            MongoDatabase database = mongoClient.getDatabase("baseDatosZoo");

            // Obtener una colección
            MongoCollection<Document> collection = database.getCollection("animales");

            // Obtener todos los documentos de la colección
            FindIterable<Document> documentos = collection.find();

            for (Document documento : documentos) {
                String codigo = documento.getString("codigo");
                String nombre = documento.getString("especie");
                String apellido = documento.getString("nombre");

                List<String> zonas = (List<String>) documento.get("zona");
                String zonaUno = "";
                String zonaDos = "";
                String zonaTres = "";

                if (zonas.size() >= 1) {
                    zonaUno = zonas.get(0);
                }
                if (zonas.size() >= 2) {
                    zonaDos = zonas.get(1);
                }
                if (zonas.size() >= 3) {
                    zonaTres = zonas.get(2);
                }

                // Crear una fila con los datos
                String[] fila = {codigo, nombre, apellido, zonaUno, zonaDos, zonaTres};

                // Agregar la fila al modelo de la tabla
                tablaModelo.addRow(fila);
            }

            // Cerrar la conexión cuando ya no se necesite
            conexion.cerrarConexion();
        } catch (Exception ex) {
            System.out.println("Error al llenar la tabla... " + ex);
        }
    }
}
